/*
 * This source file was generated by the Gradle 'init' task
 */
package com.scardina;

import org.junit.Test;

import com.scardina.App;

import static org.junit.Assert.*;

public class FlagsTest {
    @Test public void whenNetworkCountOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, 1000, 0, 0);
        });
        assertEquals(Flags.NETWORK_COUNT_OOR_ERROR, error.getMessage());
    }

    @Test public void whenNetworkCountNegOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, -1, 0, 0);
        });
        assertEquals(Flags.NETWORK_COUNT_OOR_ERROR, error.getMessage());
    }

    @Test public void whenNetworkCountIsSet_GetNetworkCountReturnSameValue() {
        assertEquals(
            32,
            new Flags(false, false, false, false, false, false, false, 32, 0, 0).getNetworkCount()
        );
    }

    @Test public void whenNetworkSuggestedCountOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, 0, 1000, 0);
        });
        assertEquals(Flags.NETWORK_SUGGESTED_COUNT_OOR_ERROR, error.getMessage());
    }

    @Test public void whenNetworkSuggestedCountNegOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, 0, -10, 0);
        });
        assertEquals(Flags.NETWORK_SUGGESTED_COUNT_OOR_ERROR, error.getMessage());
    }

    @Test public void whenNetworkSuggestedCountIsSet_GetNetworkSuggestedCountReturnSameValue() {
        assertEquals(
            23,
            new Flags(false, false, false, false, false, false, false, 32, 23, 0).getNetworkSuggestedCount()
        );
    }

    @Test public void whenBatteryPercentageOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, 0, 0, 900);
        });
        assertEquals(Flags.BATTERY_PERCENTAGE_OOR_ERROR, error.getMessage());
    }

    @Test public void whenBatteryPercentageNegOutOfRange_ErrorThrown() {
        Error error = assertThrows(Error.class, () -> {
            new Flags(false, false, false, false, false, false, false, 0, 0, -9);
        });
        assertEquals(Flags.BATTERY_PERCENTAGE_OOR_ERROR, error.getMessage());
    }

    @Test public void whenBatteryPercentageIsSet_GetBatteryPercentageReturnSameValue() {
        assertEquals(
            94,
            new Flags(false, false, false, false, false, false, false, 32, 23, 94).getBatteryPercentage()
        );
    }

    @Test public void whenRegisterIsTrue_GetRegisterIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenRegisterIsFalse_GetRegisterIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenUserDisabledIsTrue_GetUserDisabledIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenUserDisabledIsFalse_GetUserDisabledIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenSuspendedIsTrue_GetSuspendedIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenSuspendedIsFalse_GetSuspendedIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenWiFiIsTrue_GetWiFiIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenWiFiIsFalse_GetWiFiIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenAirlyticsIsTrue_GetAirlyticsIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenAirlyticsIsFalse_GetAirlyticsIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenSIMIsTrue_GetSIMIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenSIMIsFalse_GetSIMIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenEventLoggingIsTrue_GetEventLoggingIsTrue() {
        assertTrue(new Flags(true, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenEventLoggingIsFalse_GetEventLoggingIsFalse() {
        assertFalse(new Flags(false, false, false, false, false, false, false, 0, 0, 0).getRegistered());
    }

    @Test public void whenEveryThingIsZeroOrFalse_ValueIsZero() {
        assertEquals(0, new Flags(false, false, false, false, false, false, false, 0, 0, 0).getValue());
    }

    @Test public void whenCreatedWithSettings_ValueCanBeUsedToCreateEqualObject() {
        final boolean expectedRegister = true;
        final boolean expectedUserDisabled = false;
        final boolean expectedSuspended = true;
        final boolean expectedAirlytics = true;
        final boolean expectedSIM = false;
        final boolean expectedEventLogging = false;
        final int expectedNetworkCount = 11;
        final int expectedNetworkSuggestedCount = 13;
        final int expectedBatterPercentage = 21;

        Flags flags = new Flags(
            expectedRegister, 
            expectedUserDisabled, 
            expectedSuspended, 
            expectedSuspended, 
            expectedAirlytics, 
            expectedSIM, 
            expectedEventLogging, 
            expectedNetworkCount, 
            expectedNetworkSuggestedCount, 
            expectedBatterPercentage
        );

        Flags actualFlags = new Flags(flags.getValue());

        assertEquals(actualFlags.getRegistered(), expectedRegister);
        assertEquals(actualFlags.getUserDisabled(), expectedUserDisabled);
        assertEquals(actualFlags.getSuspended(), expectedSuspended);
        assertEquals(actualFlags.getAirlytics(), expectedAirlytics);
        assertEquals(actualFlags.getSIM(), expectedSIM);
        assertEquals(actualFlags.getEventLogging(), expectedEventLogging);
        assertEquals(actualFlags.getNetworkCount(), expectedNetworkCount);
        assertEquals(actualFlags.getNetworkSuggestedCount(), expectedNetworkSuggestedCount);
        assertEquals(actualFlags.getBatteryPercentage(), expectedBatterPercentage);
    }

    @Test public void whenToJSON_JSONIsValid() {
        String expectedJSON = "{\"networkCount\":10,\"networkSuggestedCount\":9,"+
                              "\"batteryPercentage\":100,\"registered\":true,"+
                              "\"userDisabled\":true,\"suspended\":true,\"wifi\""+
                              ":true,\"airlytics\":true,\"sim\":true,\"eventLogging\":false}";
        assertEquals(
            new Flags(true, true, true, true, true, true, false, 10, 9, 100).toJSON(), 
            expectedJSON
        );
    }
}
